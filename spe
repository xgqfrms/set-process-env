#!/usr/bin/env node

/**
 *
 * @author xgqfrms
 * @license MIT
 * @copyright xgqfrms 2021.10.14
 *
 * @description PORT_ENV Generator
 * @augments
 * @example spe PORT_ENV=8090
 *
 */

const shell = require("shelljs");
// const crossEnv = require("cross-env");

// const fs = require("fs");

const {
  version,
  argv,
  platform,
  // versions,
  // arch,
  // env,
} = process;

const packageInfo = require("./package.json");

console.log(`\n🚀 your spe version = ${packageInfo.version}`);
// v12.18.0
console.log('\n your node.js version =', version.substr(1).split('.')[0]);

console.log('\n your platform =', platform === 'darwin' ? 'macOS' : 'Windows');

const isMac = (platform === 'darwin');

const args = argv.slice(2) || [];

// console.log('\n your argv =', argv);
console.log('\n your args =', args);

const isPureNumber = (str = '') => {
  const numberDict = [...''.padEnd(10, 'x')].map((item, i) => `${i}`);
  const arr = `${str}`.split('');
  return arr.every(item => numberDict.includes(item));
}


let key = "";
let env = "";
let commands = "";
const obj = {};

if (!args[0]) {
  key = 'PORT_ENV';
  env = 8080;
  commands = ` ${key}=${env}`;
} else {
  if(args.length === 1) {
    // 单个 env
    const tempArr = args[0].split('=');
    key = tempArr[0] || 'PORT_ENV';
    env = isPureNumber(tempArr[1]) ? parseInt(tempArr[1]) : tempArr[1];
    commands = ` ${key}=${env}`;
  } else {
    // for 循环 args 读取多组 env
    for (const [index, arg] of args.entries()) {
      // console.log('arg, index =', arg, index);
      const [key, value] = arg.split('=');
      // console.log('key, value =', key, value);
      // isNaN & parseInt() 10
      if(!Number.isNaN(parseInt(value))) {
        obj[key] = parseInt(value);
      } else {
        obj[key] = `${value}`;
      }
      if(isPureNumber(value)) {
        commands += ` ${key}=${value}`;
      } else {
        commands += ` ${key}='${value}'`;
      }
    }
    // 拼接后，直接执行
    // PORT_ENV=666 PROXY_ENV='pre' npm run dev
    // PORT_ENV=666 PROXY_ENV=pre npm run dev
  }
}


let command = "";

// old version cross-env (dist)
if (args.length >= 1) {
  // 单个 process 直接执行 ✅
  if(isMac) {
    command = `./node_modules/cross-env/dist/bin/cross-env.js ${commands} npm run dev`;
  } else {
    command = `./node_modules/cross-env/dist/bin/cross-env-shell.js ${commands} npm run dev`;
  }
  // npm / yarn
  // command = `./node_modules/cross-env/dist/bin/cross-env.js ${key}=${env} npm run dev`;
  // command = `./node_modules/cross-env/dist/bin/cross-env.js ${key}=${env} yarn dev`;
} else {
  // 单个 process 直接执行 ✅
  if(isMac) {
    command = `./node_modules/cross-env/dist/bin/cross-env.js ${key}='${env}' npm run dev`;
  } else {
    command = `./node_modules/cross-env/dist/bin/cross-env-shell.js ${key}='${env}' npm run dev`;
  }
  // npm / yarn
  // command = `./node_modules/cross-env/dist/bin/cross-env.js ${key}='${env}' npm run dev`;
  // command = `./node_modules/cross-env/dist/bin/cross-env.js ${key}='${env}' yarn dev`;
}

// new version cross-env (src)
/*
if (isPureNumber(env)) {
  // npm / yarn
  // 单个 process 直接执行 ✅
  command = `./node_modules/cross-env/src/bin/cross-env.js ${key}=${env} npm run dev`;
  // command = `./node_modules/cross-env/src/bin/cross-env.js ${key}=${env} yarn dev`;
} else {
  // 单个 process 直接执行 ✅
  command = `./node_modules/cross-env/src/bin/cross-env.js ${key}='${env}' npm run dev`;
  // command = `./node_modules/cross-env/src/bin/cross-env.js ${key}='${env}' yarn dev`;
}
*/


// console.log('\n test commands =', commands);
// console.log('\n test obj =', obj, JSON.stringify(obj, null, 4));

console.log('\n test command =', command);

// shelljs 执行 command (Windows CMD / PowerShell bug ❌)
shell.exec(command);

// console.log('\n PORT_ENV =', process.env.PORT_ENV);
// console.log('\n shell.env.PORT_ENV =', shell.env.PORT_ENV);

if(process.env.PORT_ENV) {
  console.log('\n🎉 finished!');
} else {
  console.log('\❌ error occurred!');
}

